use rusty_machine::linalg::{Matrix,Vector};

pub fn generate_data() -> (Matrix<f64>, Vector<f64>) {
    // Training data (Seatbelts dataset from R's datasets library)
    let data = Matrix::new(192,4,vec![1687.0,867.0,269.0,9059.0,1508.0,825.0,265.0,7685.0,1507.0,806.0,319.0,9963.0,1385.0,814.0,407.0,10955.0,1632.0,991.0,454.0,11823.0,1511.0,945.0,427.0,12391.0,1559.0,1004.0,522.0,13460.0,1630.0,1091.0,536.0,14055.0,1579.0,958.0,405.0,12106.0,1653.0,850.0,437.0,11372.0,2152.0,1109.0,434.0,9834.0,2148.0,1113.0,437.0,9267.0,1752.0,925.0,316.0,9130.0,1765.0,903.0,311.0,8933.0,1717.0,1006.0,351.0,11000.0,1558.0,892.0,362.0,10733.0,1575.0,990.0,486.0,12912.0,1520.0,866.0,429.0,12926.0,1805.0,1095.0,551.0,13990.0,1800.0,1204.0,646.0,14926.0,1719.0,1029.0,456.0,12900.0,2008.0,1147.0,475.0,12034.0,2242.0,1171.0,456.0,10643.0,2478.0,1299.0,468.0,10742.0,2030.0,944.0,356.0,10266.0,1655.0,874.0,271.0,10281.0,1693.0,840.0,354.0,11527.0,1623.0,893.0,427.0,12281.0,1805.0,1007.0,465.0,13587.0,1746.0,973.0,440.0,13049.0,1795.0,1097.0,539.0,16055.0,1926.0,1194.0,646.0,15220.0,1619.0,988.0,457.0,13824.0,1992.0,1077.0,446.0,12729.0,2233.0,1045.0,402.0,11467.0,2192.0,1115.0,441.0,11351.0,2080.0,1005.0,359.0,10803.0,1768.0,857.0,334.0,10548.0,1835.0,879.0,312.0,12368.0,1569.0,887.0,427.0,13311.0,1976.0,1075.0,434.0,13885.0,1853.0,1121.0,486.0,14088.0,1965.0,1190.0,569.0,16932.0,1689.0,1058.0,523.0,16164.0,1778.0,939.0,418.0,14883.0,1976.0,1074.0,452.0,13532.0,2397.0,1089.0,462.0,12220.0,2654.0,1208.0,497.0,12025.0,2097.0,903.0,354.0,11692.0,1963.0,916.0,347.0,11081.0,1677.0,787.0,276.0,13745.0,1941.0,1114.0,472.0,14382.0,2003.0,1014.0,487.0,14391.0,1813.0,1022.0,505.0,15597.0,2012.0,1114.0,619.0,16834.0,1912.0,1132.0,640.0,17282.0,2084.0,1111.0,559.0,15779.0,2080.0,1008.0,453.0,13946.0,2118.0,916.0,418.0,12701.0,2150.0,992.0,419.0,10431.0,1608.0,731.0,262.0,11616.0,1503.0,665.0,299.0,10808.0,1548.0,724.0,303.0,12421.0,1382.0,744.0,401.0,13605.0,1731.0,910.0,413.0,14455.0,1798.0,883.0,426.0,15019.0,1779.0,900.0,516.0,15662.0,1887.0,1057.0,600.0,16745.0,2004.0,1076.0,459.0,14717.0,2077.0,919.0,443.0,13756.0,2092.0,920.0,412.0,12531.0,2051.0,953.0,400.0,12568.0,1577.0,664.0,278.0,11249.0,1356.0,607.0,302.0,11096.0,1652.0,777.0,381.0,12637.0,1382.0,633.0,279.0,13018.0,1519.0,791.0,442.0,15005.0,1421.0,790.0,409.0,15235.0,1442.0,803.0,416.0,15552.0,1543.0,884.0,511.0,16905.0,1656.0,769.0,393.0,14776.0,1561.0,732.0,345.0,14104.0,1905.0,859.0,391.0,12854.0,2199.0,994.0,470.0,12956.0,1473.0,704.0,266.0,12177.0,1655.0,684.0,312.0,11918.0,1407.0,671.0,300.0,13517.0,1395.0,643.0,373.0,14417.0,1530.0,771.0,412.0,15911.0,1309.0,644.0,322.0,15589.0,1526.0,828.0,458.0,16543.0,1327.0,748.0,427.0,17925.0,1627.0,767.0,346.0,15406.0,1748.0,825.0,421.0,14601.0,1958.0,810.0,344.0,13107.0,2274.0,986.0,370.0,12268.0,1648.0,714.0,291.0,11972.0,1401.0,567.0,224.0,12028.0,1411.0,616.0,266.0,14033.0,1403.0,678.0,338.0,14244.0,1394.0,742.0,298.0,15287.0,1520.0,840.0,386.0,16954.0,1528.0,888.0,479.0,17361.0,1643.0,852.0,473.0,17694.0,1515.0,774.0,332.0,16222.0,1685.0,831.0,391.0,14969.0,2000.0,889.0,370.0,13624.0,2215.0,1046.0,431.0,13842.0,1956.0,889.0,366.0,12387.0,1462.0,626.0,250.0,11608.0,1563.0,808.0,355.0,15021.0,1459.0,746.0,304.0,14834.0,1446.0,754.0,379.0,16565.0,1622.0,865.0,440.0,16882.0,1657.0,980.0,500.0,18012.0,1638.0,959.0,511.0,18855.0,1643.0,856.0,384.0,17243.0,1683.0,798.0,366.0,16045.0,2050.0,942.0,432.0,14745.0,2262.0,1010.0,390.0,13726.0,1813.0,796.0,306.0,11196.0,1445.0,643.0,232.0,12105.0,1762.0,794.0,342.0,14723.0,1461.0,750.0,329.0,15582.0,1556.0,809.0,394.0,16863.0,1431.0,716.0,355.0,16758.0,1427.0,851.0,385.0,17434.0,1554.0,931.0,463.0,18359.0,1645.0,834.0,453.0,17189.0,1653.0,762.0,373.0,16909.0,2016.0,880.0,401.0,15380.0,2207.0,1077.0,466.0,15161.0,1665.0,748.0,306.0,14027.0,1361.0,593.0,263.0,14478.0,1506.0,720.0,323.0,16155.0,1360.0,646.0,310.0,16585.0,1453.0,765.0,424.0,18117.0,1522.0,820.0,403.0,17552.0,1460.0,807.0,406.0,18299.0,1552.0,885.0,466.0,19361.0,1548.0,803.0,381.0,17924.0,1827.0,860.0,369.0,17872.0,1737.0,825.0,378.0,16058.0,1941.0,911.0,392.0,15746.0,1474.0,704.0,284.0,15226.0,1458.0,691.0,316.0,14932.0,1542.0,688.0,321.0,16846.0,1404.0,714.0,358.0,16854.0,1522.0,814.0,378.0,18146.0,1385.0,736.0,382.0,17559.0,1641.0,876.0,433.0,18655.0,1510.0,829.0,506.0,19453.0,1681.0,818.0,428.0,17923.0,1938.0,942.0,479.0,17915.0,1868.0,782.0,370.0,16496.0,1726.0,823.0,349.0,13544.0,1456.0,595.0,238.0,13601.0,1445.0,673.0,285.0,15667.0,1456.0,660.0,324.0,17358.0,1365.0,676.0,346.0,18112.0,1487.0,755.0,410.0,18581.0,1558.0,815.0,411.0,18759.0,1488.0,867.0,496.0,20668.0,1684.0,933.0,534.0,21040.0,1594.0,798.0,396.0,18993.0,1850.0,950.0,470.0,18668.0,1998.0,825.0,385.0,16768.0,2079.0,911.0,411.0,16551.0,1494.0,619.0,281.0,16231.0,1057.0,426.0,300.0,15511.0,1218.0,475.0,318.0,18308.0,1168.0,556.0,391.0,17793.0,1236.0,559.0,398.0,19205.0,1076.0,483.0,337.0,19162.0,1174.0,587.0,477.0,20997.0,1139.0,615.0,422.0,20705.0,1427.0,618.0,495.0,18759.0,1487.0,662.0,471.0,19240.0,1483.0,519.0,368.0,17504.0,1513.0,585.0,345.0,16591.0,1357.0,483.0,296.0,16224.0,1165.0,434.0,319.0,16670.0,1282.0,513.0,349.0,18539.0,1110.0,548.0,375.0,19759.0,1297.0,586.0,441.0,19584.0,1185.0,522.0,465.0,19976.0,1222.0,601.0,472.0,21486.0,1284.0,644.0,521.0,21626.0,1444.0,643.0,429.0,20195.0,1575.0,641.0,408.0,19928.0,1737.0,711.0,490.0,18564.0,1763.0,721.0,491.0,18149.0]);

    let target = Vector::new(vec![107.0,97.0,102.0,87.0,119.0,106.0,110.0,106.0,107.0,134.0,147.0,180.0,125.0,134.0,110.0,102.0,103.0,111.0,120.0,129.0,122.0,183.0,169.0,190.0,134.0,108.0,104.0,117.0,157.0,148.0,130.0,140.0,136.0,140.0,187.0,150.0,159.0,143.0,114.0,127.0,159.0,156.0,138.0,120.0,117.0,170.0,168.0,198.0,144.0,146.0,109.0,131.0,151.0,140.0,153.0,140.0,161.0,168.0,152.0,136.0,113.0,100.0,103.0,103.0,121.0,134.0,133.0,129.0,144.0,154.0,156.0,163.0,122.0,92.0,117.0,95.0,96.0,108.0,108.0,106.0,140.0,114.0,158.0,161.0,102.0,127.0,125.0,101.0,97.0,112.0,112.0,113.0,108.0,128.0,154.0,162.0,112.0,79.0,82.0,127.0,108.0,110.0,123.0,103.0,97.0,140.0,165.0,183.0,148.0,111.0,116.0,115.0,100.0,106.0,134.0,125.0,117.0,122.0,153.0,178.0,114.0,94.0,128.0,119.0,111.0,110.0,114.0,118.0,115.0,132.0,153.0,171.0,115.0,95.0,92.0,100.0,95.0,114.0,102.0,104.0,132.0,136.0,117.0,137.0,111.0,106.0,98.0,84.0,94.0,105.0,123.0,109.0,130.0,153.0,134.0,99.0,115.0,104.0,131.0,108.0,103.0,115.0,122.0,122.0,125.0,137.0,138.0,152.0,120.0,95.0,100.0,89.0,82.0,89.0,60.0,84.0,113.0,126.0,122.0,118.0,92.0,86.0,81.0,84.0,87.0,90.0,79.0,96.0,122.0,120.0,137.0,154.0]);

    (data,target)
}

pub fn near_singular_data() -> (Matrix<f64>, Vector<f64>){
    let data = Matrix::new(3, 2, vec![1.0, 2.00001, 1.0, 2.0, 1.001, 2.0]);
    let target = Vector::new(vec![1.0, 1.0, 1.0]);
    (data,target)
}
